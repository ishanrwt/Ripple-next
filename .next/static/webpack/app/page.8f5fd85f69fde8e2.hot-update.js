"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./lib/api/botService.ts":
/*!*******************************!*\
  !*** ./lib/api/botService.ts ***!
  \*******************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   executeSQL: function() { return /* binding */ executeSQL; },\n/* harmony export */   getBotResponse: function() { return /* binding */ getBotResponse; },\n/* harmony export */   parseQuery: function() { return /* binding */ parseQuery; }\n/* harmony export */ });\n/* provided dependency */ var process = __webpack_require__(/*! process */ \"(app-pages-browser)/./node_modules/next/dist/build/polyfills/process.js\");\n// Bot service for handling AI responses with multiple chart types\nconst getBotResponse = async (message)=>{\n    const D1_URL = process.env.NEXT_PUBLIC_D1_API_URL || \"https://ai-engine-1.onrender.com\";\n    const D2_URL = process.env.NEXT_PUBLIC_D2_API_URL || \"http://31.220.72.148:3001\";\n    try {\n        // Step 1: Parse query\n        const d1Response = await parseQuery(message);\n        console.log(\"D1 Response:\", d1Response);\n        // Step 2: Run SQL\n        const d2DataResponse = await executeSQL(d1Response.sql);\n        console.log(\"D2 Data Response:\", d2DataResponse);\n        // Step 3: Format data for charts/maps/tables\n        let vizData = null;\n        if ([\n            \"chart\",\n            \"map\"\n        ].includes(d1Response.intent)) {\n            vizData = formatVizData(d2DataResponse.data, d1Response.intent);\n            console.log(\"Formatted Viz Data:\", vizData);\n        }\n        // Step 4: Return to UI\n        return {\n            id: Date.now(),\n            sender: \"bot\",\n            text: \"Here is the \".concat(d1Response.intent, ' for \"').concat(d1Response.query, '\"'),\n            type: d1Response.intent,\n            data: vizData,\n            rawData: d2DataResponse.data // for tables\n        };\n    } catch (err) {\n        console.error(\"Bot response error:\", err);\n        return getMockResponse(message);\n    }\n};\n// ---------- Format Chart Data Dynamically ----------\nconst formatVizData = (data, intent)=>{\n    if (!data || data.length === 0) return null;\n    // Detect chart type from intent\n    let chartType = \"line\";\n    if (intent.includes(\"bar\")) chartType = \"bar\";\n    else if (intent.includes(\"pie\")) chartType = \"pie\";\n    else if (intent.includes(\"map\") || intent.includes(\"heatmap\")) chartType = \"heatmap\";\n    else if (intent.includes(\"line\") || intent.includes(\"trend\")) chartType = \"line\";\n    // Extract labels (x-axis) & datasets (y-values)\n    const labels = data.map((row)=>row.year || row.category || \"Unknown\");\n    const keys = Object.keys(data[0]).filter((k)=>k !== \"year\" && k !== \"category\");\n    const datasets = keys.map((k)=>({\n            label: k,\n            data: data.map((row)=>Number(row[k]) || 0),\n            backgroundColor: chartType === \"pie\" ? [\n                \"rgba(255,99,132,0.6)\",\n                \"rgba(54,162,235,0.6)\",\n                \"rgba(255,206,86,0.6)\",\n                \"rgba(75,192,192,0.6)\"\n            ] : \"rgba(54,162,235,0.5)\",\n            borderColor: \"rgba(54,162,235,1)\",\n            fill: chartType !== \"line\"\n        }));\n    return {\n        type: chartType,\n        data: {\n            labels,\n            datasets\n        },\n        options: {\n            responsive: true,\n            plugins: {\n                legend: {\n                    position: \"top\"\n                },\n                title: {\n                    display: true,\n                    text: \"Groundwater Data Visualization\"\n                }\n            }\n        }\n    };\n};\n// ---------- Existing Functions ----------\nconst parseQuery = async (query)=>{\n    const D1_URL = process.env.NEXT_PUBLIC_D1_API_URL || \"https://ai-engine-1.onrender.com\";\n    const response = await fetch(\"\".concat(D1_URL, \"/api/parse-query\"), {\n        method: \"POST\",\n        headers: {\n            \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n            query\n        })\n    });\n    return await response.json();\n};\nconst executeSQL = async (sql)=>{\n    const D2_URL = process.env.NEXT_PUBLIC_D2_API_URL || \"http://31.220.72.148:3001\";\n    const response = await fetch(\"\".concat(D2_URL, \"/api/execute-sql\"), {\n        method: \"POST\",\n        headers: {\n            \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n            sql\n        })\n    });\n    return await response.json();\n};\n// Mock data for fallback\nconst getMockResponse = (message)=>{\n    return {\n        id: Date.now(),\n        sender: \"bot\",\n        text: \"Sample chart for fallback\",\n        type: \"chart\",\n        data: {\n            type: \"bar\",\n            data: {\n                labels: [\n                    \"2019\",\n                    \"2020\",\n                    \"2021\"\n                ],\n                datasets: [\n                    {\n                        label: \"Rainfall\",\n                        data: [\n                            100,\n                            200,\n                            150\n                        ],\n                        backgroundColor: \"rgba(75,192,192,0.6)\"\n                    }\n                ]\n            },\n            options: {}\n        }\n    };\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/api/botService.ts\n"));

/***/ })

});