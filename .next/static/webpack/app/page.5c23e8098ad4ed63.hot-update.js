"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./lib/api/botService.ts":
/*!*******************************!*\
  !*** ./lib/api/botService.ts ***!
  \*******************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getBotResponse: function() { return /* binding */ getBotResponse; }\n/* harmony export */ });\n/* provided dependency */ var process = __webpack_require__(/*! process */ \"(app-pages-browser)/./node_modules/next/dist/build/polyfills/process.js\");\n// lib/api/botService.ts\n// Bot service for handling AI responses with frontend-friendly visualization data\nconst D1_URL = process.env.NEXT_PUBLIC_D1_API_URL || \"https://ai-engine-1.onrender.com\";\nconst D2_URL = process.env.NEXT_PUBLIC_D2_API_URL || \"http://31.220.72.148:3001\";\nconst getBotResponse = async (message)=>{\n    console.log(\"D1 URL:\", D1_URL);\n    console.log(\"D2 URL:\", D2_URL);\n    try {\n        // Step 1: D1 for intent + SQL\n        const d1Response = await parseQuery(message);\n        console.log(\"D1 Response:\", d1Response);\n        // Step 2: D2 for SQL data\n        const d2DataResponse = await executeSQL(d1Response.sql);\n        console.log(\"D2 Data Response:\", d2DataResponse);\n        // Step 3: Prepare visualization data\n        let d2VizResponse = null;\n        if ([\n            \"chart\",\n            \"map\",\n            \"bar\",\n            \"pie\"\n        ].includes(d1Response.intent)) {\n            d2VizResponse = formatVizData(d2DataResponse.data, d1Response.intent);\n            console.log(\"Formatted Viz Data:\", d2VizResponse);\n        }\n        // Step 4: Return final response for UI\n        return {\n            id: Date.now(),\n            sender: \"bot\",\n            text: \"Here's the \".concat(d1Response.intent, ' for your query: \"').concat(d1Response.query, '\"'),\n            type: d1Response.intent === \"chart\" ? \"chart\" : d1Response.intent === \"map\" ? \"map\" : d1Response.intent === \"bar\" ? \"bar\" : d1Response.intent === \"pie\" ? \"pie\" : d1Response.intent === \"table\" ? \"table\" : \"text\",\n            data: d2VizResponse,\n            rawData: d2DataResponse.data\n        };\n    } catch (error) {\n        console.error(\"Error in bot response:\", error);\n        return getMockResponse(message);\n    }\n};\n// ---------------- Visualization Formatter ----------------\nconst formatVizData = (data, intent)=>{\n    if (!data || data.length === 0) {\n        return {\n            error: true,\n            message: \"cannot process it right now please input another query\"\n        };\n    }\n    const keys = Object.keys(data[0]);\n    const hasYear = keys.includes(\"year\");\n    const hasDistrict = keys.includes(\"district\");\n    const xField = hasYear ? \"year\" : hasDistrict ? \"district\" : keys[0];\n    const yFields = keys.filter((k)=>k !== xField);\n    if (yFields.length === 0) {\n        return {\n            error: true,\n            message: \"cannot process it right now please input another query\"\n        };\n    }\n    switch(intent){\n        case \"chart\":\n        case \"timeline\":\n            return {\n                type: \"line\",\n                labels: data.map((row)=>row[xField]),\n                datasets: yFields.map((field, idx)=>({\n                        label: field.replace(/_/g, \" \"),\n                        data: data.map((row)=>parseFloat(row[field])),\n                        borderColor: \"hsl(\".concat(idx * 60, \", 70%, 50%)\"),\n                        backgroundColor: \"hsla(\".concat(idx * 60, \", 70%, 50%, 0.3)\"),\n                        fill: false,\n                        tension: 0.3\n                    }))\n            };\n        case \"bar\":\n            return {\n                type: \"bar\",\n                labels: data.map((row)=>row[xField]),\n                datasets: yFields.map((field, idx)=>({\n                        label: field.replace(/_/g, \" \"),\n                        data: data.map((row)=>parseFloat(row[field])),\n                        backgroundColor: \"hsl(\".concat(idx * 60, \", 70%, 50%)\")\n                    }))\n            };\n        case \"pie\":\n            return {\n                type: \"pie\",\n                labels: data.map((row)=>row[xField]),\n                datasets: [\n                    {\n                        label: yFields[0].replace(/_/g, \" \"),\n                        data: data.map((row)=>parseFloat(row[yFields[0]])),\n                        backgroundColor: data.map((_, idx)=>\"hsl(\".concat(idx * 40, \", 70%, 50%)\"))\n                    }\n                ]\n            };\n        default:\n            if (hasDistrict) {\n                return {\n                    type: \"bar\",\n                    labels: data.map((row)=>row[xField]),\n                    datasets: yFields.map((field, idx)=>({\n                            label: field.replace(/_/g, \" \"),\n                            data: data.map((row)=>parseFloat(row[field])),\n                            backgroundColor: \"hsl(\".concat(idx * 60, \", 70%, 50%)\")\n                        }))\n                };\n            } else if (hasYear) {\n                return {\n                    type: \"line\",\n                    labels: data.map((row)=>row[xField]),\n                    datasets: yFields.map((field, idx)=>({\n                            label: field.replace(/_/g, \" \"),\n                            data: data.map((row)=>parseFloat(row[field])),\n                            borderColor: \"hsl(\".concat(idx * 60, \", 70%, 50%)\"),\n                            backgroundColor: \"hsla(\".concat(idx * 60, \", 70%, 50%, 0.3)\"),\n                            fill: false\n                        }))\n                };\n            }\n            return {\n                error: true,\n                message: \"cannot process it right now please input another query\"\n            };\n    }\n} // ---------------- Other helpers (unchanged) ----------------\n // parseQuery, executeSQL, generateVisualization, getMockResponse\n;\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL2xpYi9hcGkvYm90U2VydmljZS50cyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBLHdCQUF3QjtBQUN4QixrRkFBa0Y7QUFFbEYsTUFBTUEsU0FDSkMsT0FBT0EsQ0FBQ0MsR0FBRyxDQUFDQyxzQkFBc0IsSUFBSTtBQUN4QyxNQUFNQyxTQUNKSCxPQUFPQSxDQUFDQyxHQUFHLENBQUNHLHNCQUFzQixJQUFJO0FBRWpDLE1BQU1DLGlCQUFpQixPQUFPQztJQUNuQ0MsUUFBUUMsR0FBRyxDQUFDLFdBQVdUO0lBQ3ZCUSxRQUFRQyxHQUFHLENBQUMsV0FBV0w7SUFFdkIsSUFBSTtRQUNGLDhCQUE4QjtRQUM5QixNQUFNTSxhQUFhLE1BQU1DLFdBQVdKO1FBQ3BDQyxRQUFRQyxHQUFHLENBQUMsZ0JBQWdCQztRQUU1QiwwQkFBMEI7UUFDMUIsTUFBTUUsaUJBQWlCLE1BQU1DLFdBQVdILFdBQVdJLEdBQUc7UUFDdEROLFFBQVFDLEdBQUcsQ0FBQyxxQkFBcUJHO1FBRWpDLHFDQUFxQztRQUNyQyxJQUFJRyxnQkFBZ0I7UUFDcEIsSUFBSTtZQUFDO1lBQVM7WUFBTztZQUFPO1NBQU0sQ0FBQ0MsUUFBUSxDQUFDTixXQUFXTyxNQUFNLEdBQUc7WUFDOURGLGdCQUFnQkcsY0FDZE4sZUFBZU8sSUFBSSxFQUNuQlQsV0FBV08sTUFBTTtZQUVuQlQsUUFBUUMsR0FBRyxDQUFDLHVCQUF1Qk07UUFDckM7UUFFQSx1Q0FBdUM7UUFDdkMsT0FBTztZQUNMSyxJQUFJQyxLQUFLQyxHQUFHO1lBQ1pDLFFBQVE7WUFDUkMsTUFBTSxjQUFvRGQsT0FBdENBLFdBQVdPLE1BQU0sRUFBQyxzQkFBcUMsT0FBakJQLFdBQVdlLEtBQUssRUFBQztZQUMzRUMsTUFDRWhCLFdBQVdPLE1BQU0sS0FBSyxVQUNsQixVQUNBUCxXQUFXTyxNQUFNLEtBQUssUUFDdEIsUUFDQVAsV0FBV08sTUFBTSxLQUFLLFFBQ3RCLFFBQ0FQLFdBQVdPLE1BQU0sS0FBSyxRQUN0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QUcsQ0FBQyxDQUFDQyxNQUFRTSxXQUFXTixHQUFHLENBQUNFLE1BQU07NEJBQzdDTSxpQkFBaUIsT0FBZ0IsT0FBVEwsTUFBTSxJQUFHO3dCQUNuQztnQkFDRjtZQUNGLE9BQU8sSUFBSVgsU0FBUztnQkFDbEIsT0FBTztvQkFDTFAsTUFBTTtvQkFDTmEsUUFBUXBCLEtBQUtxQixHQUFHLENBQUMsQ0FBQ0MsTUFBUUEsR0FBRyxDQUFDTixPQUFPO29CQUNyQ08sVUFBVU4sUUFBUUksR0FBRyxDQUFDLENBQUNHLE9BQU9DLE1BQVM7NEJBQ3JDQyxPQUFPRixNQUFNRyxPQUFPLENBQUMsTUFBTTs0QkFDM0IzQixNQUFNQSxLQUFLcUIsR0FBRyxDQUFDLENBQUNDLE1BQVFNLFdBQVdOLEdBQUcsQ0FBQ0UsTUFBTTs0QkFDN0NLLGFBQWEsT0FBZ0IsT0FBVEosTUFBTSxJQUFHOzRCQUM3QkssaUJBQWlCLFFBQWlCLE9BQVRMLE1BQU0sSUFBRzs0QkFDbENNLE1BQU07d0JBQ1I7Z0JBQ0Y7WUFDRjtZQUVBLE9BQU87Z0JBQ0x0QixPQUFPO2dCQUNQckIsU0FDRTtZQUNKO0lBQ0o7QUFDRixFQUVBLDhEQUE4RDtDQUM5RCxpRUFBaUUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbGliL2FwaS9ib3RTZXJ2aWNlLnRzP2ZiNTUiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gbGliL2FwaS9ib3RTZXJ2aWNlLnRzXHJcbi8vIEJvdCBzZXJ2aWNlIGZvciBoYW5kbGluZyBBSSByZXNwb25zZXMgd2l0aCBmcm9udGVuZC1mcmllbmRseSB2aXN1YWxpemF0aW9uIGRhdGFcclxuXHJcbmNvbnN0IEQxX1VSTCA9XHJcbiAgcHJvY2Vzcy5lbnYuTkVYVF9QVUJMSUNfRDFfQVBJX1VSTCB8fCAnaHR0cHM6Ly9haS1lbmdpbmUtMS5vbnJlbmRlci5jb20nXHJcbmNvbnN0IEQyX1VSTCA9XHJcbiAgcHJvY2Vzcy5lbnYuTkVYVF9QVUJMSUNfRDJfQVBJX1VSTCB8fCAnaHR0cDovLzMxLjIyMC43Mi4xNDg6MzAwMSdcclxuXHJcbmV4cG9ydCBjb25zdCBnZXRCb3RSZXNwb25zZSA9IGFzeW5jIChtZXNzYWdlOiBzdHJpbmcpID0+IHtcclxuICBjb25zb2xlLmxvZygnRDEgVVJMOicsIEQxX1VSTClcclxuICBjb25zb2xlLmxvZygnRDIgVVJMOicsIEQyX1VSTClcclxuXHJcbiAgdHJ5IHtcclxuICAgIC8vIFN0ZXAgMTogRDEgZm9yIGludGVudCArIFNRTFxyXG4gICAgY29uc3QgZDFSZXNwb25zZSA9IGF3YWl0IHBhcnNlUXVlcnkobWVzc2FnZSlcclxuICAgIGNvbnNvbGUubG9nKCdEMSBSZXNwb25zZTonLCBkMVJlc3BvbnNlKVxyXG5cclxuICAgIC8vIFN0ZXAgMjogRDIgZm9yIFNRTCBkYXRhXHJcbiAgICBjb25zdCBkMkRhdGFSZXNwb25zZSA9IGF3YWl0IGV4ZWN1dGVTUUwoZDFSZXNwb25zZS5zcWwpXHJcbiAgICBjb25zb2xlLmxvZygnRDIgRGF0YSBSZXNwb25zZTonLCBkMkRhdGFSZXNwb25zZSlcclxuXHJcbiAgICAvLyBTdGVwIDM6IFByZXBhcmUgdmlzdWFsaXphdGlvbiBkYXRhXHJcbiAgICBsZXQgZDJWaXpSZXNwb25zZSA9IG51bGxcclxuICAgIGlmIChbJ2NoYXJ0JywgJ21hcCcsICdiYXInLCAncGllJ10uaW5jbHVkZXMoZDFSZXNwb25zZS5pbnRlbnQpKSB7XHJcbiAgICAgIGQyVml6UmVzcG9uc2UgPSBmb3JtYXRWaXpEYXRhKFxyXG4gICAgICAgIGQyRGF0YVJlc3BvbnNlLmRhdGEsXHJcbiAgICAgICAgZDFSZXNwb25zZS5pbnRlbnRcclxuICAgICAgKVxyXG4gICAgICBjb25zb2xlLmxvZygnRm9ybWF0dGVkIFZpeiBEYXRhOicsIGQyVml6UmVzcG9uc2UpXHJcbiAgICB9XHJcblxyXG4gICAgLy8gU3RlcCA0OiBSZXR1cm4gZmluYWwgcmVzcG9uc2UgZm9yIFVJXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBpZDogRGF0ZS5ub3coKSxcclxuICAgICAgc2VuZGVyOiAnYm90JyxcclxuICAgICAgdGV4dDogYEhlcmUncyB0aGUgJHtkMVJlc3BvbnNlLmludGVudH0gZm9yIHlvdXIgcXVlcnk6IFwiJHtkMVJlc3BvbnNlLnF1ZXJ5fVwiYCxcclxuICAgICAgdHlwZTpcclxuICAgICAgICBkMVJlc3BvbnNlLmludGVudCA9PT0gJ2NoYXJ0J1xyXG4gICAgICAgICAgPyAnY2hhcnQnXHJcbiAgICAgICAgICA6IGQxUmVzcG9uc2UuaW50ZW50ID09PSAnbWFwJ1xyXG4gICAgICAgICAgPyAnbWFwJ1xyXG4gICAgICAgICAgOiBkMVJlc3BvbnNlLmludGVudCA9PT0gJ2JhcidcclxuICAgICAgICAgID8gJ2JhcidcclxuICAgICAgICAgIDogZDFSZXNwb25zZS5pbnRlbnQgPT09ICdwaWUnXHJcbiAgICAgICAgICA/ICdwaWUnXHJcbiAgICAgICAgICA6IGQxUmVzcG9uc2UuaW50ZW50ID09PSAndGFibGUnXHJcbiAgICAgICAgICA/ICd0YWJsZSdcclxuICAgICAgICAgIDogJ3RleHQnLFxyXG4gICAgICBkYXRhOiBkMlZpelJlc3BvbnNlLCAvLyDinIUgaW5jbHVkZXMgeyB0eXBlLCBsYWJlbHMsIGRhdGFzZXRzIH1cclxuICAgICAgcmF3RGF0YTogZDJEYXRhUmVzcG9uc2UuZGF0YSxcclxuICAgIH1cclxuICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgY29uc29sZS5lcnJvcignRXJyb3IgaW4gYm90IHJlc3BvbnNlOicsIGVycm9yKVxyXG4gICAgcmV0dXJuIGdldE1vY2tSZXNwb25zZShtZXNzYWdlKVxyXG4gIH1cclxufVxyXG5cclxuLy8gLS0tLS0tLS0tLS0tLS0tLSBWaXN1YWxpemF0aW9uIEZvcm1hdHRlciAtLS0tLS0tLS0tLS0tLS0tXHJcbmNvbnN0IGZvcm1hdFZpekRhdGEgPSAoZGF0YTogYW55W10sIGludGVudDogc3RyaW5nKSA9PiB7XHJcbiAgaWYgKCFkYXRhIHx8IGRhdGEubGVuZ3RoID09PSAwKSB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBlcnJvcjogdHJ1ZSxcclxuICAgICAgbWVzc2FnZTpcclxuICAgICAgICAnY2Fubm90IHByb2Nlc3MgaXQgcmlnaHQgbm93IHBsZWFzZSBpbnB1dCBhbm90aGVyIHF1ZXJ5JyxcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhkYXRhWzBdKVxyXG4gIGNvbnN0IGhhc1llYXIgPSBrZXlzLmluY2x1ZGVzKCd5ZWFyJylcclxuICBjb25zdCBoYXNEaXN0cmljdCA9IGtleXMuaW5jbHVkZXMoJ2Rpc3RyaWN0JylcclxuXHJcbiAgY29uc3QgeEZpZWxkID0gaGFzWWVhciA/ICd5ZWFyJyA6IGhhc0Rpc3RyaWN0ID8gJ2Rpc3RyaWN0JyA6IGtleXNbMF1cclxuICBjb25zdCB5RmllbGRzID0ga2V5cy5maWx0ZXIoKGspID0+IGsgIT09IHhGaWVsZClcclxuXHJcbiAgaWYgKHlGaWVsZHMubGVuZ3RoID09PSAwKSB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBlcnJvcjogdHJ1ZSxcclxuICAgICAgbWVzc2FnZTpcclxuICAgICAgICAnY2Fubm90IHByb2Nlc3MgaXQgcmlnaHQgbm93IHBsZWFzZSBpbnB1dCBhbm90aGVyIHF1ZXJ5JyxcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHN3aXRjaCAoaW50ZW50KSB7XHJcbiAgICBjYXNlICdjaGFydCc6XHJcbiAgICBjYXNlICd0aW1lbGluZSc6XHJcbiAgICAgIHJldHVybiB7XHJcbiAgICAgICAgdHlwZTogJ2xpbmUnLFxyXG4gICAgICAgIGxhYmVsczogZGF0YS5tYXAoKHJvdykgPT4gcm93W3hGaWVsZF0pLFxyXG4gICAgICAgIGRhdGFzZXRzOiB5RmllbGRzLm1hcCgoZmllbGQsIGlkeCkgPT4gKHtcclxuICAgICAgICAgIGxhYmVsOiBmaWVsZC5yZXBsYWNlKC9fL2csICcgJyksXHJcbiAgICAgICAgICBkYXRhOiBkYXRhLm1hcCgocm93KSA9PiBwYXJzZUZsb2F0KHJvd1tmaWVsZF0pKSxcclxuICAgICAgICAgIGJvcmRlckNvbG9yOiBgaHNsKCR7aWR4ICogNjB9LCA3MCUsIDUwJSlgLFxyXG4gICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBgaHNsYSgke2lkeCAqIDYwfSwgNzAlLCA1MCUsIDAuMylgLFxyXG4gICAgICAgICAgZmlsbDogZmFsc2UsXHJcbiAgICAgICAgICB0ZW5zaW9uOiAwLjMsXHJcbiAgICAgICAgfSkpLFxyXG4gICAgICB9XHJcblxyXG4gICAgY2FzZSAnYmFyJzpcclxuICAgICAgcmV0dXJuIHtcclxuICAgICAgICB0eXBlOiAnYmFyJyxcclxuICAgICAgICBsYWJlbHM6IGRhdGEubWFwKChyb3cpID0+IHJvd1t4RmllbGRdKSxcclxuICAgICAgICBkYXRhc2V0czogeUZpZWxkcy5tYXAoKGZpZWxkLCBpZHgpID0+ICh7XHJcbiAgICAgICAgICBsYWJlbDogZmllbGQucmVwbGFjZSgvXy9nLCAnICcpLFxyXG4gICAgICAgICAgZGF0YTogZGF0YS5tYXAoKHJvdykgPT4gcGFyc2VGbG9hdChyb3dbZmllbGRdKSksXHJcbiAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IGBoc2woJHtpZHggKiA2MH0sIDcwJSwgNTAlKWAsXHJcbiAgICAgICAgfSkpLFxyXG4gICAgICB9XHJcblxyXG4gICAgY2FzZSAncGllJzpcclxuICAgICAgcmV0dXJuIHtcclxuICAgICAgICB0eXBlOiAncGllJyxcclxuICAgICAgICBsYWJlbHM6IGRhdGEubWFwKChyb3cpID0+IHJvd1t4RmllbGRdKSxcclxuICAgICAgICBkYXRhc2V0czogW1xyXG4gICAgICAgICAge1xyXG4gICAgICAgICAgICBsYWJlbDogeUZpZWxkc1swXS5yZXBsYWNlKC9fL2csICcgJyksXHJcbiAgICAgICAgICAgIGRhdGE6IGRhdGEubWFwKChyb3cpID0+IHBhcnNlRmxvYXQocm93W3lGaWVsZHNbMF1dKSksXHJcbiAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogZGF0YS5tYXAoXHJcbiAgICAgICAgICAgICAgKF8sIGlkeCkgPT4gYGhzbCgke2lkeCAqIDQwfSwgNzAlLCA1MCUpYFxyXG4gICAgICAgICAgICApLFxyXG4gICAgICAgICAgfSxcclxuICAgICAgICBdLFxyXG4gICAgICB9XHJcblxyXG4gICAgZGVmYXVsdDpcclxuICAgICAgaWYgKGhhc0Rpc3RyaWN0KSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgIHR5cGU6ICdiYXInLFxyXG4gICAgICAgICAgbGFiZWxzOiBkYXRhLm1hcCgocm93KSA9PiByb3dbeEZpZWxkXSksXHJcbiAgICAgICAgICBkYXRhc2V0czogeUZpZWxkcy5tYXAoKGZpZWxkLCBpZHgpID0+ICh7XHJcbiAgICAgICAgICAgIGxhYmVsOiBmaWVsZC5yZXBsYWNlKC9fL2csICcgJyksXHJcbiAgICAgICAgICAgIGRhdGE6IGRhdGEubWFwKChyb3cpID0+IHBhcnNlRmxvYXQocm93W2ZpZWxkXSkpLFxyXG4gICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IGBoc2woJHtpZHggKiA2MH0sIDcwJSwgNTAlKWAsXHJcbiAgICAgICAgICB9KSksXHJcbiAgICAgICAgfVxyXG4gICAgICB9IGVsc2UgaWYgKGhhc1llYXIpIHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgdHlwZTogJ2xpbmUnLFxyXG4gICAgICAgICAgbGFiZWxzOiBkYXRhLm1hcCgocm93KSA9PiByb3dbeEZpZWxkXSksXHJcbiAgICAgICAgICBkYXRhc2V0czogeUZpZWxkcy5tYXAoKGZpZWxkLCBpZHgpID0+ICh7XHJcbiAgICAgICAgICAgIGxhYmVsOiBmaWVsZC5yZXBsYWNlKC9fL2csICcgJyksXHJcbiAgICAgICAgICAgIGRhdGE6IGRhdGEubWFwKChyb3cpID0+IHBhcnNlRmxvYXQocm93W2ZpZWxkXSkpLFxyXG4gICAgICAgICAgICBib3JkZXJDb2xvcjogYGhzbCgke2lkeCAqIDYwfSwgNzAlLCA1MCUpYCxcclxuICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBgaHNsYSgke2lkeCAqIDYwfSwgNzAlLCA1MCUsIDAuMylgLFxyXG4gICAgICAgICAgICBmaWxsOiBmYWxzZSxcclxuICAgICAgICAgIH0pKSxcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHJldHVybiB7XHJcbiAgICAgICAgZXJyb3I6IHRydWUsXHJcbiAgICAgICAgbWVzc2FnZTpcclxuICAgICAgICAgICdjYW5ub3QgcHJvY2VzcyBpdCByaWdodCBub3cgcGxlYXNlIGlucHV0IGFub3RoZXIgcXVlcnknLFxyXG4gICAgICB9XHJcbiAgfVxyXG59XHJcblxyXG4vLyAtLS0tLS0tLS0tLS0tLS0tIE90aGVyIGhlbHBlcnMgKHVuY2hhbmdlZCkgLS0tLS0tLS0tLS0tLS0tLVxyXG4vLyBwYXJzZVF1ZXJ5LCBleGVjdXRlU1FMLCBnZW5lcmF0ZVZpc3VhbGl6YXRpb24sIGdldE1vY2tSZXNwb25zZVxyXG4iXSwibmFtZXMiOlsiRDFfVVJMIiwicHJvY2VzcyIsImVudiIsIk5FWFRfUFVCTElDX0QxX0FQSV9VUkwiLCJEMl9VUkwiLCJORVhUX1BVQkxJQ19EMl9BUElfVVJMIiwiZ2V0Qm90UmVzcG9uc2UiLCJtZXNzYWdlIiwiY29uc29sZSIsImxvZyIsImQxUmVzcG9uc2UiLCJwYXJzZVF1ZXJ5IiwiZDJEYXRhUmVzcG9uc2UiLCJleGVjdXRlU1FMIiwic3FsIiwiZDJWaXpSZXNwb25zZSIsImluY2x1ZGVzIiwiaW50ZW50IiwiZm9ybWF0Vml6RGF0YSIsImRhdGEiLCJpZCIsIkRhdGUiLCJub3ciLCJzZW5kZXIiLCJ0ZXh0IiwicXVlcnkiLCJ0eXBlIiwicmF3RGF0YSIsImVycm9yIiwiZ2V0TW9ja1Jlc3BvbnNlIiwibGVuZ3RoIiwia2V5cyIsIk9iamVjdCIsImhhc1llYXIiLCJoYXNEaXN0cmljdCIsInhGaWVsZCIsInlGaWVsZHMiLCJmaWx0ZXIiLCJrIiwibGFiZWxzIiwibWFwIiwicm93IiwiZGF0YXNldHMiLCJmaWVsZCIsImlkeCIsImxhYmVsIiwicmVwbGFjZSIsInBhcnNlRmxvYXQiLCJib3JkZXJDb2xvciIsImJhY2tncm91bmRDb2xvciIsImZpbGwiLCJ0ZW5zaW9uIiwiXyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/api/botService.ts\n"));

/***/ })

});