"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./lib/api/botService.ts":
/*!*******************************!*\
  !*** ./lib/api/botService.ts ***!
  \*******************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   executeSQL: function() { return /* binding */ executeSQL; },\n/* harmony export */   generateVisualization: function() { return /* binding */ generateVisualization; },\n/* harmony export */   getBotResponse: function() { return /* binding */ getBotResponse; },\n/* harmony export */   parseQuery: function() { return /* binding */ parseQuery; }\n/* harmony export */ });\n/* provided dependency */ var process = __webpack_require__(/*! process */ \"(app-pages-browser)/./node_modules/next/dist/build/polyfills/process.js\");\n// Bot service for handling AI responses with frontend-friendly visualization data\nconst getBotResponse = async (message)=>{\n    const D1_URL = process.env.NEXT_PUBLIC_D1_API_URL || \"https://ai-engine-1.onrender.com\";\n    const D2_URL = process.env.NEXT_PUBLIC_D2_API_URL || \"http://31.220.72.148:3001\";\n    console.log(\"D1 URL:\", D1_URL);\n    console.log(\"D2 URL:\", D2_URL);\n    try {\n        // Step 1: D1 for intent + SQL\n        const d1Response = await parseQuery(message);\n        console.log(\"D1 Response:\", d1Response);\n        // Step 2: D2 for SQL data\n        const d2DataResponse = await executeSQL(d1Response.sql);\n        console.log(\"D2 Data Response:\", d2DataResponse);\n        // Step 3: Prepare visualization data for charts/maps\n        let d2VizResponse = null;\n        if (d1Response.intent === \"chart\" || d1Response.intent === \"map\" || d1Response.intent === \"bar\" || d1Response.intent === \"pie\") {\n            d2VizResponse = formatVizData(d2DataResponse.data, d1Response.intent);\n            console.log(\"Formatted Viz Data:\", d2VizResponse);\n        }\n        // Step 4: Final response for UI\n        return {\n            id: Date.now(),\n            sender: \"bot\",\n            text: \"Here's the \".concat(d1Response.intent, ' for your query: \"').concat(d1Response.query, '\"'),\n            type: d1Response.intent === \"chart\" ? \"chart\" : d1Response.intent === \"map\" ? \"map\" : d1Response.intent === \"bar\" ? \"bar\" : d1Response.intent === \"pie\" ? \"pie\" : d1Response.intent === \"table\" ? \"table\" : \"text\",\n            data: d2VizResponse,\n            rawData: d2DataResponse.data\n        };\n    } catch (error) {\n        console.error(\"Error in bot response:\", error);\n        return getMockResponse(message);\n    }\n};\n// ---------------- Helper: Visualization Formatter ----------------\n// ---------------- Intent â†’ Visualization Type ----------------\nconst mapIntentToVizType = (intent)=>{\n    if (intent === \"map\" || intent.includes(\"heatmap\") || intent.includes(\"location\")) return \"heatmap\";\n    if (intent === \"chart\" || intent.includes(\"trend\") || intent.includes(\"graph\")) return \"timeline\";\n    if (intent.includes(\"bar\") || intent.includes(\"comparison\")) return \"bar_chart\";\n    if (intent.includes(\"pie\") || intent.includes(\"distribution\")) return \"pie_chart\";\n    return \"timeline\";\n};\n// ---------------- D1 API ----------------\nconst parseQuery = async (query)=>{\n    const D1_URL = process.env.NEXT_PUBLIC_D1_API_URL || \"https://ai-engine-1.onrender.com\";\n    const response = await fetch(\"\".concat(D1_URL, \"/api/parse-query\"), {\n        method: \"POST\",\n        headers: {\n            \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n            query\n        })\n    });\n    if (!response.ok) throw new Error(\"D1 parse failed: \".concat(response.statusText));\n    return await response.json();\n};\n// ---------------- D2 SQL API ----------------\nconst executeSQL = async (sql)=>{\n    const D2_URL = process.env.NEXT_PUBLIC_D2_API_URL || \"http://31.220.72.148:3001\";\n    const response = await fetch(\"\".concat(D2_URL, \"/api/execute-sql\"), {\n        method: \"POST\",\n        headers: {\n            \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n            sql\n        })\n    });\n    if (!response.ok) throw new Error(\"D2 SQL failed: \".concat(response.statusText));\n    return await response.json();\n};\n// ---------------- D2 Visualization API ----------------\nconst generateVisualization = async (data, intent)=>{\n    const D2_URL = process.env.NEXT_PUBLIC_D2_API_URL || \"http://31.220.72.148:3001\";\n    const vizType = mapIntentToVizType(intent);\n    const response = await fetch(\"\".concat(D2_URL, \"/api/generate-visualization\"), {\n        method: \"POST\",\n        headers: {\n            \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n            type: vizType,\n            data\n        })\n    });\n    if (!response.ok) throw new Error(\"D2 Viz failed: \".concat(response.statusText));\n    return await response.json();\n};\n// ---------------- Mock Fallback ----------------\nconst getMockResponse = (message)=>{\n    const lower = message.toLowerCase();\n    if (lower.includes(\"map\")) {\n        return {\n            id: Date.now(),\n            sender: \"bot\",\n            text: \"Mock Heatmap\",\n            type: \"map\",\n            data: [\n                {\n                    lat: 31.1,\n                    lng: 75.3,\n                    value: 100\n                }\n            ]\n        };\n    }\n    if (lower.includes(\"chart\")) {\n        return {\n            id: Date.now(),\n            sender: \"bot\",\n            text: \"Mock Chart\",\n            type: \"chart\",\n            data: formatVizData([\n                {\n                    year: \"2023\",\n                    gw_recharge_rainfall_ham: 100,\n                    gw_extraction_total_ham: 50\n                }\n            ], \"chart\")\n        };\n    }\n    if (lower.includes(\"table\")) {\n        return {\n            id: Date.now(),\n            sender: \"bot\",\n            text: \"Mock Table\",\n            type: \"table\",\n            rawData: [\n                {\n                    year: \"2023\",\n                    rainfall: 1000\n                }\n            ]\n        };\n    }\n    return {\n        id: Date.now(),\n        sender: \"bot\",\n        text: \"Mock Text\",\n        type: \"text\"\n    };\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL2xpYi9hcGkvYm90U2VydmljZS50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBLGtGQUFrRjtBQUUzRSxNQUFNQSxpQkFBaUIsT0FBT0M7SUFDbkMsTUFBTUMsU0FBU0MsT0FBT0EsQ0FBQ0MsR0FBRyxDQUFDQyxzQkFBc0IsSUFBSTtJQUNyRCxNQUFNQyxTQUFTSCxPQUFPQSxDQUFDQyxHQUFHLENBQUNHLHNCQUFzQixJQUFJO0lBRXJEQyxRQUFRQyxHQUFHLENBQUMsV0FBV1A7SUFDdkJNLFFBQVFDLEdBQUcsQ0FBQyxXQUFXSDtJQUV2QixJQUFJO1FBQ0YsOEJBQThCO1FBQzlCLE1BQU1JLGFBQWEsTUFBTUMsV0FBV1Y7UUFDcENPLFFBQVFDLEdBQUcsQ0FBQyxnQkFBZ0JDO1FBRTVCLDBCQUEwQjtRQUMxQixNQUFNRSxpQkFBaUIsTUFBTUMsV0FBV0gsV0FBV0ksR0FBRztRQUN0RE4sUUFBUUMsR0FBRyxDQUFDLHFCQUFxQkc7UUFFakMscURBQXFEO1FBQ3JELElBQUlHLGdCQUFnQjtRQUNwQixJQUFJTCxXQUFXTSxNQUFNLEtBQUssV0FBV04sV0FBV00sTUFBTSxLQUFLLFNBQVNOLFdBQVdNLE1BQU0sS0FBSyxTQUFTTixXQUFXTSxNQUFNLEtBQUssT0FBTztZQUM5SEQsZ0JBQWdCRSxjQUFjTCxlQUFlTSxJQUFJLEVBQUVSLFdBQVdNLE1BQU07WUFDcEVSLFFBQVFDLEdBQUcsQ0FBQyx1QkFBdUJNO1FBQ3JDO1FBRUEsZ0NBQWdDO1FBQ2hDLE9BQU87WUFDTEksSUFBSUMsS0FBS0MsR0FBRztZQUNaQyxRQUFRO1lBQ1JDLE1BQU0sY0FBb0RiLE9BQXRDQSxXQUFXTSxNQUFNLEVBQUMsc0JBQXFDLE9BQWpCTixXQUFXYyxLQUFLLEVBQUM7WUFDM0VDLE1BQ0VmLFdBQVdNLE1BQU0sS0FBSyxVQUNsQixVQUNBTixXQUFXTSxNQUFNLEtBQUssUUFDdEIsUUFDQU4sV0FBV00sTUFBTSxLQUFLLFFBQ3RCLFFBQ0FOLFdB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S0FBSztvQkFBTUMsT0FBTztnQkFBSTthQUFFO1FBQUM7SUFDMUg7SUFDQSxJQUFJSixNQUFNZCxRQUFRLENBQUMsVUFBVTtRQUMzQixPQUFPO1lBQUVYLElBQUlDLEtBQUtDLEdBQUc7WUFBSUMsUUFBUTtZQUFPQyxNQUFNO1lBQWNFLE1BQU07WUFBU1AsTUFBTUQsY0FBYztnQkFBQztvQkFBRWdDLE1BQU07b0JBQVFDLDBCQUEwQjtvQkFBS0MseUJBQXlCO2dCQUFHO2FBQUUsRUFBRTtRQUFTO0lBQzFMO0lBQ0EsSUFBSVAsTUFBTWQsUUFBUSxDQUFDLFVBQVU7UUFDM0IsT0FBTztZQUFFWCxJQUFJQyxLQUFLQyxHQUFHO1lBQUlDLFFBQVE7WUFBT0MsTUFBTTtZQUFjRSxNQUFNO1lBQVNDLFNBQVM7Z0JBQUM7b0JBQUV1QixNQUFNO29CQUFRRyxVQUFVO2dCQUFLO2FBQUU7UUFBQztJQUN6SDtJQUNBLE9BQU87UUFBRWpDLElBQUlDLEtBQUtDLEdBQUc7UUFBSUMsUUFBUTtRQUFPQyxNQUFNO1FBQWFFLE1BQU07SUFBTztBQUMxRSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9saWIvYXBpL2JvdFNlcnZpY2UudHM/ZmI1NSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBCb3Qgc2VydmljZSBmb3IgaGFuZGxpbmcgQUkgcmVzcG9uc2VzIHdpdGggZnJvbnRlbmQtZnJpZW5kbHkgdmlzdWFsaXphdGlvbiBkYXRhXHJcblxyXG5leHBvcnQgY29uc3QgZ2V0Qm90UmVzcG9uc2UgPSBhc3luYyAobWVzc2FnZTogc3RyaW5nKSA9PiB7XHJcbiAgY29uc3QgRDFfVVJMID0gcHJvY2Vzcy5lbnYuTkVYVF9QVUJMSUNfRDFfQVBJX1VSTCB8fCBcImh0dHBzOi8vYWktZW5naW5lLTEub25yZW5kZXIuY29tXCI7XHJcbiAgY29uc3QgRDJfVVJMID0gcHJvY2Vzcy5lbnYuTkVYVF9QVUJMSUNfRDJfQVBJX1VSTCB8fCBcImh0dHA6Ly8zMS4yMjAuNzIuMTQ4OjMwMDFcIjtcclxuXHJcbiAgY29uc29sZS5sb2coXCJEMSBVUkw6XCIsIEQxX1VSTCk7XHJcbiAgY29uc29sZS5sb2coXCJEMiBVUkw6XCIsIEQyX1VSTCk7XHJcblxyXG4gIHRyeSB7XHJcbiAgICAvLyBTdGVwIDE6IEQxIGZvciBpbnRlbnQgKyBTUUxcclxuICAgIGNvbnN0IGQxUmVzcG9uc2UgPSBhd2FpdCBwYXJzZVF1ZXJ5KG1lc3NhZ2UpO1xyXG4gICAgY29uc29sZS5sb2coXCJEMSBSZXNwb25zZTpcIiwgZDFSZXNwb25zZSk7XHJcblxyXG4gICAgLy8gU3RlcCAyOiBEMiBmb3IgU1FMIGRhdGFcclxuICAgIGNvbnN0IGQyRGF0YVJlc3BvbnNlID0gYXdhaXQgZXhlY3V0ZVNRTChkMVJlc3BvbnNlLnNxbCk7XHJcbiAgICBjb25zb2xlLmxvZyhcIkQyIERhdGEgUmVzcG9uc2U6XCIsIGQyRGF0YVJlc3BvbnNlKTtcclxuXHJcbiAgICAvLyBTdGVwIDM6IFByZXBhcmUgdmlzdWFsaXphdGlvbiBkYXRhIGZvciBjaGFydHMvbWFwc1xyXG4gICAgbGV0IGQyVml6UmVzcG9uc2UgPSBudWxsO1xyXG4gICAgaWYgKGQxUmVzcG9uc2UuaW50ZW50ID09PSBcImNoYXJ0XCIgfHwgZDFSZXNwb25zZS5pbnRlbnQgPT09IFwibWFwXCIgfHwgZDFSZXNwb25zZS5pbnRlbnQgPT09IFwiYmFyXCIgfHwgZDFSZXNwb25zZS5pbnRlbnQgPT09IFwicGllXCIpIHtcclxuICAgICAgZDJWaXpSZXNwb25zZSA9IGZvcm1hdFZpekRhdGEoZDJEYXRhUmVzcG9uc2UuZGF0YSwgZDFSZXNwb25zZS5pbnRlbnQpO1xyXG4gICAgICBjb25zb2xlLmxvZyhcIkZvcm1hdHRlZCBWaXogRGF0YTpcIiwgZDJWaXpSZXNwb25zZSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gU3RlcCA0OiBGaW5hbCByZXNwb25zZSBmb3IgVUlcclxuICAgIHJldHVybiB7XHJcbiAgICAgIGlkOiBEYXRlLm5vdygpLFxyXG4gICAgICBzZW5kZXI6IFwiYm90XCIsXHJcbiAgICAgIHRleHQ6IGBIZXJlJ3MgdGhlICR7ZDFSZXNwb25zZS5pbnRlbnR9IGZvciB5b3VyIHF1ZXJ5OiBcIiR7ZDFSZXNwb25zZS5xdWVyeX1cImAsXHJcbiAgICAgIHR5cGU6XHJcbiAgICAgICAgZDFSZXNwb25zZS5pbnRlbnQgPT09IFwiY2hhcnRcIlxyXG4gICAgICAgICAgPyBcImNoYXJ0XCJcclxuICAgICAgICAgIDogZDFSZXNwb25zZS5pbnRlbnQgPT09IFwibWFwXCJcclxuICAgICAgICAgID8gXCJtYXBcIlxyXG4gICAgICAgICAgOiBkMVJlc3BvbnNlLmludGVudCA9PT0gXCJiYXJcIlxyXG4gICAgICAgICAgPyBcImJhclwiXHJcbiAgICAgICAgICA6IGQxUmVzcG9uc2UuaW50ZW50ID09PSBcInBpZVwiXHJcbiAgICAgICAgICA/IFwicGllXCJcclxuICAgICAgICAgIDogZDFSZXNwb25zZS5pbnRlbnQgPT09IFwidGFibGVcIlxyXG4gICAgICAgICAgPyBcInRhYmxlXCJcclxuICAgICAgICAgIDogXCJ0ZXh0XCIsXHJcbiAgICAgIGRhdGE6IGQyVml6UmVzcG9uc2UsXHJcbiAgICAgIHJhd0RhdGE6IGQyRGF0YVJlc3BvbnNlLmRhdGEsXHJcbiAgICB9O1xyXG4gIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgaW4gYm90IHJlc3BvbnNlOlwiLCBlcnJvcik7XHJcbiAgICByZXR1cm4gZ2V0TW9ja1Jlc3BvbnNlKG1lc3NhZ2UpO1xyXG4gIH1cclxufTtcclxuXHJcbi8vIC0tLS0tLS0tLS0tLS0tLS0gSGVscGVyOiBWaXN1YWxpemF0aW9uIEZvcm1hdHRlciAtLS0tLS0tLS0tLS0tLS0tXHJcblxyXG5cclxuLy8gLS0tLS0tLS0tLS0tLS0tLSBJbnRlbnQg4oaSIFZpc3VhbGl6YXRpb24gVHlwZSAtLS0tLS0tLS0tLS0tLS0tXHJcbmNvbnN0IG1hcEludGVudFRvVml6VHlwZSA9IChpbnRlbnQ6IHN0cmluZykgPT4ge1xyXG4gIGlmIChpbnRlbnQgPT09IFwibWFwXCIgfHwgaW50ZW50LmluY2x1ZGVzKFwiaGVhdG1hcFwiKSB8fCBpbnRlbnQuaW5jbHVkZXMoXCJsb2NhdGlvblwiKSkgcmV0dXJuIFwiaGVhdG1hcFwiO1xyXG4gIGlmIChpbnRlbnQgPT09IFwiY2hhcnRcIiB8fCBpbnRlbnQuaW5jbHVkZXMoXCJ0cmVuZFwiKSB8fCBpbnRlbnQuaW5jbHVkZXMoXCJncmFwaFwiKSkgcmV0dXJuIFwidGltZWxpbmVcIjtcclxuICBpZiAoaW50ZW50LmluY2x1ZGVzKFwiYmFyXCIpIHx8IGludGVudC5pbmNsdWRlcyhcImNvbXBhcmlzb25cIikpIHJldHVybiBcImJhcl9jaGFydFwiO1xyXG4gIGlmIChpbnRlbnQuaW5jbHVkZXMoXCJwaWVcIikgfHwgaW50ZW50LmluY2x1ZGVzKFwiZGlzdHJpYnV0aW9uXCIpKSByZXR1cm4gXCJwaWVfY2hhcnRcIjtcclxuICByZXR1cm4gXCJ0aW1lbGluZVwiO1xyXG59O1xyXG5cclxuLy8gLS0tLS0tLS0tLS0tLS0tLSBEMSBBUEkgLS0tLS0tLS0tLS0tLS0tLVxyXG5leHBvcnQgY29uc3QgcGFyc2VRdWVyeSA9IGFzeW5jIChxdWVyeTogc3RyaW5nKSA9PiB7XHJcbiAgY29uc3QgRDFfVVJMID0gcHJvY2Vzcy5lbnYuTkVYVF9QVUJMSUNfRDFfQVBJX1VSTCB8fCBcImh0dHBzOi8vYWktZW5naW5lLTEub25yZW5kZXIuY29tXCI7XHJcbiAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChgJHtEMV9VUkx9L2FwaS9wYXJzZS1xdWVyeWAsIHtcclxuICAgIG1ldGhvZDogXCJQT1NUXCIsXHJcbiAgICBoZWFkZXJzOiB7IFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiIH0sXHJcbiAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7IHF1ZXJ5IH0pLFxyXG4gIH0pO1xyXG4gIGlmICghcmVzcG9uc2Uub2spIHRocm93IG5ldyBFcnJvcihgRDEgcGFyc2UgZmFpbGVkOiAke3Jlc3BvbnNlLnN0YXR1c1RleHR9YCk7XHJcbiAgcmV0dXJuIGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcclxufTtcclxuXHJcbi8vIC0tLS0tLS0tLS0tLS0tLS0gRDIgU1FMIEFQSSAtLS0tLS0tLS0tLS0tLS0tXHJcbmV4cG9ydCBjb25zdCBleGVjdXRlU1FMID0gYXN5bmMgKHNxbDogc3RyaW5nKSA9PiB7XHJcbiAgY29uc3QgRDJfVVJMID0gcHJvY2Vzcy5lbnYuTkVYVF9QVUJMSUNfRDJfQVBJX1VSTCB8fCBcImh0dHA6Ly8zMS4yMjAuNzIuMTQ4OjMwMDFcIjtcclxuICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKGAke0QyX1VSTH0vYXBpL2V4ZWN1dGUtc3FsYCwge1xyXG4gICAgbWV0aG9kOiBcIlBPU1RcIixcclxuICAgIGhlYWRlcnM6IHsgXCJDb250ZW50LVR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCIgfSxcclxuICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHsgc3FsIH0pLFxyXG4gIH0pO1xyXG4gIGlmICghcmVzcG9uc2Uub2spIHRocm93IG5ldyBFcnJvcihgRDIgU1FMIGZhaWxlZDogJHtyZXNwb25zZS5zdGF0dXNUZXh0fWApO1xyXG4gIHJldHVybiBhd2FpdCByZXNwb25zZS5qc29uKCk7XHJcbn07XHJcblxyXG4vLyAtLS0tLS0tLS0tLS0tLS0tIEQyIFZpc3VhbGl6YXRpb24gQVBJIC0tLS0tLS0tLS0tLS0tLS1cclxuZXhwb3J0IGNvbnN0IGdlbmVyYXRlVmlzdWFsaXphdGlvbiA9IGFzeW5jIChkYXRhOiBhbnlbXSwgaW50ZW50OiBzdHJpbmcpID0+IHtcclxuICBjb25zdCBEMl9VUkwgPSBwcm9jZXNzLmVudi5ORVhUX1BVQkxJQ19EMl9BUElfVVJMIHx8IFwiaHR0cDovLzMxLjIyMC43Mi4xNDg6MzAwMVwiO1xyXG4gIGNvbnN0IHZpelR5cGUgPSBtYXBJbnRlbnRUb1ZpelR5cGUoaW50ZW50KTtcclxuICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKGAke0QyX1VSTH0vYXBpL2dlbmVyYXRlLXZpc3VhbGl6YXRpb25gLCB7XHJcbiAgICBtZXRob2Q6IFwiUE9TVFwiLFxyXG4gICAgaGVhZGVyczogeyBcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIiB9LFxyXG4gICAgYm9keTogSlNPTi5zdHJpbmdpZnkoeyB0eXBlOiB2aXpUeXBlLCBkYXRhIH0pLFxyXG4gIH0pO1xyXG4gIGlmICghcmVzcG9uc2Uub2spIHRocm93IG5ldyBFcnJvcihgRDIgVml6IGZhaWxlZDogJHtyZXNwb25zZS5zdGF0dXNUZXh0fWApO1xyXG4gIHJldHVybiBhd2FpdCByZXNwb25zZS5qc29uKCk7XHJcbn07XHJcblxyXG4vLyAtLS0tLS0tLS0tLS0tLS0tIE1vY2sgRmFsbGJhY2sgLS0tLS0tLS0tLS0tLS0tLVxyXG5jb25zdCBnZXRNb2NrUmVzcG9uc2UgPSAobWVzc2FnZTogc3RyaW5nKSA9PiB7XHJcbiAgY29uc3QgbG93ZXIgPSBtZXNzYWdlLnRvTG93ZXJDYXNlKCk7XHJcbiAgaWYgKGxvd2VyLmluY2x1ZGVzKFwibWFwXCIpKSB7XHJcbiAgICByZXR1cm4geyBpZDogRGF0ZS5ub3coKSwgc2VuZGVyOiBcImJvdFwiLCB0ZXh0OiBcIk1vY2sgSGVhdG1hcFwiLCB0eXBlOiBcIm1hcFwiLCBkYXRhOiBbeyBsYXQ6IDMxLjEsIGxuZzogNzUuMywgdmFsdWU6IDEwMCB9XSB9O1xyXG4gIH1cclxuICBpZiAobG93ZXIuaW5jbHVkZXMoXCJjaGFydFwiKSkge1xyXG4gICAgcmV0dXJuIHsgaWQ6IERhdGUubm93KCksIHNlbmRlcjogXCJib3RcIiwgdGV4dDogXCJNb2NrIENoYXJ0XCIsIHR5cGU6IFwiY2hhcnRcIiwgZGF0YTogZm9ybWF0Vml6RGF0YShbeyB5ZWFyOiBcIjIwMjNcIiwgZ3dfcmVjaGFyZ2VfcmFpbmZhbGxfaGFtOiAxMDAsIGd3X2V4dHJhY3Rpb25fdG90YWxfaGFtOiA1MCB9XSwgXCJjaGFydFwiKSB9O1xyXG4gIH1cclxuICBpZiAobG93ZXIuaW5jbHVkZXMoXCJ0YWJsZVwiKSkge1xyXG4gICAgcmV0dXJuIHsgaWQ6IERhdGUubm93KCksIHNlbmRlcjogXCJib3RcIiwgdGV4dDogXCJNb2NrIFRhYmxlXCIsIHR5cGU6IFwidGFibGVcIiwgcmF3RGF0YTogW3sgeWVhcjogXCIyMDIzXCIsIHJhaW5mYWxsOiAxMDAwIH1dIH07XHJcbiAgfVxyXG4gIHJldHVybiB7IGlkOiBEYXRlLm5vdygpLCBzZW5kZXI6IFwiYm90XCIsIHRleHQ6IFwiTW9jayBUZXh0XCIsIHR5cGU6IFwidGV4dFwiIH07XHJcbn07XHJcbiJdLCJuYW1lcyI6WyJnZXRCb3RSZXNwb25zZSIsIm1lc3NhZ2UiLCJEMV9VUkwiLCJwcm9jZXNzIiwiZW52IiwiTkVYVF9QVUJMSUNfRDFfQVBJX1VSTCIsIkQyX1VSTCIsIk5FWFRfUFVCTElDX0QyX0FQSV9VUkwiLCJjb25zb2xlIiwibG9nIiwiZDFSZXNwb25zZSIsInBhcnNlUXVlcnkiLCJkMkRhdGFSZXNwb25zZSIsImV4ZWN1dGVTUUwiLCJzcWwiLCJkMlZpelJlc3BvbnNlIiwiaW50ZW50IiwiZm9ybWF0Vml6RGF0YSIsImRhdGEiLCJpZCIsIkRhdGUiLCJub3ciLCJzZW5kZXIiLCJ0ZXh0IiwicXVlcnkiLCJ0eXBlIiwicmF3RGF0YSIsImVycm9yIiwiZ2V0TW9ja1Jlc3BvbnNlIiwibWFwSW50ZW50VG9WaXpUeXBlIiwiaW5jbHVkZXMiLCJyZXNwb25zZSIsImZldGNoIiwibWV0aG9kIiwiaGVhZGVycyIsImJvZHkiLCJKU09OIiwic3RyaW5naWZ5Iiwib2siLCJFcnJvciIsInN0YXR1c1RleHQiLCJqc29uIiwiZ2VuZXJhdGVWaXN1YWxpemF0aW9uIiwidml6VHlwZSIsImxvd2VyIiwidG9Mb3dlckNhc2UiLCJsYXQiLCJsbmciLCJ2YWx1ZSIsInllYXIiLCJnd19yZWNoYXJnZV9yYWluZmFsbF9oYW0iLCJnd19leHRyYWN0aW9uX3RvdGFsX2hhbSIsInJhaW5mYWxsIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/api/botService.ts\n"));

/***/ })

});