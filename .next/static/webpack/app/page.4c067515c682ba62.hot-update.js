"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./lib/api/botService.ts":
/*!*******************************!*\
  !*** ./lib/api/botService.ts ***!
  \*******************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   executeSQL: function() { return /* binding */ executeSQL; },\n/* harmony export */   generateVisualization: function() { return /* binding */ generateVisualization; },\n/* harmony export */   getBotResponse: function() { return /* binding */ getBotResponse; },\n/* harmony export */   parseQuery: function() { return /* binding */ parseQuery; }\n/* harmony export */ });\n/* provided dependency */ var process = __webpack_require__(/*! process */ \"(app-pages-browser)/./node_modules/next/dist/build/polyfills/process.js\");\n// lib/api/botService.ts\n// Bot service for handling AI responses with frontend-friendly visualization data\n// ✅ Centralize URLs (always deployed unless overridden by env)\nconst D1_URL = process.env.NEXT_PUBLIC_D1_API_URL || \"https://ai-engine-1.onrender.com\";\nconst D2_URL = process.env.NEXT_PUBLIC_D2_API_URL || \"http://31.220.72.148:3001\";\n// ---------------- D1 API ----------------\nconst parseQuery = async (query)=>{\n    const response = await fetch(\"\".concat(D1_URL, \"/api/parse-query\"), {\n        method: \"POST\",\n        headers: {\n            \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n            query\n        })\n    });\n    if (!response.ok) throw new Error(\"D1 parse failed: \".concat(response.statusText));\n    return await response.json();\n};\n// ---------------- D2 SQL API ----------------\nconst executeSQL = async (sql)=>{\n    const response = await fetch(\"\".concat(D2_URL, \"/api/execute-sql\"), {\n        method: \"POST\",\n        headers: {\n            \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n            sql\n        })\n    });\n    if (!response.ok) throw new Error(\"D2 SQL failed: \".concat(response.statusText));\n    return await response.json();\n};\n// ---------------- D2 Visualization API ----------------\nconst generateVisualization = async (data, intent)=>{\n    const vizType = mapIntentToVizType(intent);\n    const response = await fetch(\"\".concat(D2_URL, \"/api/generate-visualization\"), {\n        method: \"POST\",\n        headers: {\n            \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n            type: vizType,\n            data\n        })\n    });\n    if (!response.ok) throw new Error(\"D2 Viz failed: \".concat(response.statusText));\n    return await response.json();\n};\n// ---------------- Mock Fallback ----------------\nconst getMockResponse = (message)=>{\n    const lower = message.toLowerCase();\n    if (lower.includes(\"map\")) {\n        return {\n            id: Date.now(),\n            sender: \"bot\",\n            text: \"Mock Heatmap\",\n            type: \"map\",\n            data: [\n                {\n                    lat: 31.1,\n                    lng: 75.3,\n                    value: 100\n                }\n            ]\n        };\n    }\n    if (lower.includes(\"chart\")) {\n        return {\n            id: Date.now(),\n            sender: \"bot\",\n            text: \"Mock Chart\",\n            type: \"chart\",\n            data: formatVizData([\n                {\n                    year: \"2023\",\n                    gw_recharge_rainfall_ham: 100,\n                    gw_extraction_total_ham: 50\n                }\n            ], \"chart\")\n        };\n    }\n    if (lower.includes(\"table\")) {\n        return {\n            id: Date.now(),\n            sender: \"bot\",\n            text: \"Mock Table\",\n            type: \"table\",\n            rawData: [\n                {\n                    year: \"2023\",\n                    rainfall: 1000\n                }\n            ]\n        };\n    }\n    return {\n        id: Date.now(),\n        sender: \"bot\",\n        text: \"Mock Text\",\n        type: \"text\"\n    };\n};\n// ---------------- Visualization Formatter ----------------\nconst formatVizData = (data, intent)=>{\n    if (!data || data.length === 0) {\n        return {\n            error: true,\n            message: \"cannot process it right now please input another query\"\n        };\n    }\n    const keys = Object.keys(data[0]);\n    const hasYear = keys.includes(\"year\");\n    const hasDistrict = keys.includes(\"district\");\n    const xField = hasYear ? \"year\" : hasDistrict ? \"district\" : keys[0];\n    const yFields = keys.filter((k)=>k !== xField);\n    if (yFields.length === 0) {\n        return {\n            error: true,\n            message: \"cannot process it right now please input another query\"\n        };\n    }\n    switch(intent){\n        case \"chart\":\n        case \"timeline\":\n            return {\n                type: \"line\",\n                labels: data.map((row)=>row[xField]),\n                datasets: yFields.map((field, idx)=>({\n                        label: field.replace(/_/g, \" \"),\n                        data: data.map((row)=>parseFloat(row[field])),\n                        borderColor: \"hsl(\".concat(idx * 60, \", 70%, 50%)\"),\n                        backgroundColor: \"hsla(\".concat(idx * 60, \", 70%, 50%, 0.3)\"),\n                        fill: false,\n                        tension: 0.3\n                    }))\n            };\n        case \"bar\":\n            return {\n                type: \"bar\",\n                labels: data.map((row)=>row[xField]),\n                datasets: yFields.map((field, idx)=>({\n                        label: field.replace(/_/g, \" \"),\n                        data: data.map((row)=>parseFloat(row[field])),\n                        backgroundColor: \"hsl(\".concat(idx * 60, \", 70%, 50%)\")\n                    }))\n            };\n        case \"pie\":\n            return {\n                type: \"pie\",\n                labels: data.map((row)=>row[xField]),\n                datasets: [\n                    {\n                        label: yFields[0].replace(/_/g, \" \"),\n                        data: data.map((row)=>parseFloat(row[yFields[0]])),\n                        backgroundColor: data.map((_, idx)=>\"hsl(\".concat(idx * 40, \", 70%, 50%)\"))\n                    }\n                ]\n            };\n        default:\n            if (hasDistrict) {\n                return {\n                    type: \"bar\",\n                    labels: data.map((row)=>row[xField]),\n                    datasets: yFields.map((field, idx)=>({\n                            label: field.replace(/_/g, \" \"),\n                            data: data.map((row)=>parseFloat(row[field])),\n                            backgroundColor: \"hsl(\".concat(idx * 60, \", 70%, 50%)\")\n                        }))\n                };\n            } else if (hasYear) {\n                return {\n                    type: \"line\",\n                    labels: data.map((row)=>row[xField]),\n                    datasets: yFields.map((field, idx)=>({\n                            label: field.replace(/_/g, \" \"),\n                            data: data.map((row)=>parseFloat(row[field])),\n                            borderColor: \"hsl(\".concat(idx * 60, \", 70%, 50%)\"),\n                            backgroundColor: \"hsla(\".concat(idx * 60, \", 70%, 50%, 0.3)\"),\n                            fill: false\n                        }))\n                };\n            }\n            return {\n                error: true,\n                message: \"cannot process it right now please input another query\"\n            };\n    }\n};\n// ---------------- Intent → Visualization Mapping ----------------\nconst mapIntentToVizType = (intent)=>{\n    if (intent === \"map\" || intent.includes(\"heatmap\") || intent.includes(\"location\")) return \"heatmap\";\n    if (intent === \"chart\" || intent.includes(\"trend\") || intent.includes(\"graph\")) return \"timeline\";\n    if (intent.includes(\"bar\") || intent.includes(\"comparison\")) return \"bar_chart\";\n    if (intent.includes(\"pie\") || intent.includes(\"distribution\")) return \"pie_chart\";\n    if (intent.includes(\"table\") || intent.includes(\"list\")) return \"table\";\n    return \"timeline\";\n};\n// ---------------- Main Bot Service ----------------\nconst getBotResponse = async (message)=>{\n    console.log(\"D1 URL:\", D1_URL);\n    console.log(\"D2 URL:\", D2_URL);\n    try {\n        // Step 1: D1 for intent + SQL\n        const d1Response = await parseQuery(message);\n        console.log(\"D1 Response:\", d1Response);\n        // Step 2: D2 for SQL data\n        const d2DataResponse = await executeSQL(d1Response.sql);\n        console.log(\"D2 Data Response:\", d2DataResponse);\n        // Step 3: Prepare visualization data\n        let d2VizResponse = null;\n        if ([\n            \"chart\",\n            \"map\",\n            \"bar\",\n            \"pie\",\n            \"table\"\n        ].includes(d1Response.intent)) {\n            d2VizResponse = formatVizData(d2DataResponse.data, d1Response.intent);\n            console.log(\"Formatted Viz Data:\", d2VizResponse);\n        }\n        // Step 4: Return final response for UI\n        return {\n            id: Date.now(),\n            sender: \"bot\",\n            text: \"Here's the \".concat(d1Response.intent, ' for your query: \"').concat(d1Response.query, '\"'),\n            type: d1Response.intent === \"chart\" ? \"chart\" : d1Response.intent === \"map\" ? \"map\" : d1Response.intent === \"bar\" ? \"bar\" : d1Response.intent === \"pie\" ? \"pie\" : d1Response.intent === \"table\" ? \"table\" : \"text\",\n            data: d2VizResponse,\n            rawData: d2DataResponse.data\n        };\n    } catch (error) {\n        console.error(\"Error in bot response:\", error);\n        return getMockResponse(message);\n    }\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/api/botService.ts\n"));

/***/ })

});